PRINTF

     Descripcion

     la funcion que desarrollamos permite el analisis de una cadena
     que es analizada termino a termino y que dependiendo de los
     caracteres especiales encontrados retorna la cadena en un formato
     estipulado

     En la siguiente tabla se mencionan los caracteres utilizados para
     el analisis de la cadena

     Simbolos    Tipo de formato

        %c       imprime un solo caracter
        %d       imprime un numero  decimales (base 10)
        %i       imprime un entero base 10
        %s       imprime una cadena de caracteres
        %%       imprime un signo de porcentaje

     en el siguiente documento se mencionaran ejemplos e interacciones de
     como el algoritmo se comporta en los casos ya mencionados, se tiene
     como objetivo que este documento sea una herramienta interactiva que
     le permita al usuario comprender el algoritmo que se utilizo y como se
     va a ejecutar  el programa en las condiciones nomarles


     Ejemplos 1

     tenemos la cadena de caracteres "hola" que esta en el main esta cadena
     nuestro caso de estudio para entender el desarrolo del programa esta
     cadena de caracteres en la funcion format esta funcion  es llamada en
     el printf

                         int _printf(const char *format, ...)

     
     donde se llama al programa y se le dice que se va a usar una lista de argumentos
     con el comando va_list y que se va a usar una variable list_argument es un tipo
     de dato despues se inicializa list_argument que es la encargada de llamar a format

                        va_start(list_argument, format);

     despues se realiza una verificacion de format por medio de un if que pretende
     descartar si format es falso o en la posicion [0] hay un "%" y en la posicion [1]
     es "\0" retorne "-1".

                 if (!format || (format[0] == '%' && format[1] == '\0'))
                                       return (-1);


      realiza un analisis de la cadena y entra en el primer if que evalua si
     format es falso o format en la posicion 0 es igual a % y format en la posicion 1 es igual a nulo



               if (!format || (format[0] == '%' && format[1] == '\0'))
                                     return (-1);

      despues de este paso entra a un for que cuenta los caracteres y los compara


                           for (i = 0; format[i] != '\0'; i++)

      si formant en la primera posicion es igual a % realice la siguiente verificacion en este punto
      verifica si la siguiente posicion es igual a % imprima "%" y sume uno al contador i 
       
      for (i = 0; format[i] != '\0'; i++)
	{
		if (format[i] == '%')
		{
			if (format[i + 1] == '%')
			{
				_putchar('%');
				count++;
				i++;
			}
			else if (text_format(format, i + 1) != NULL)
			{
				count += text_format(format, i + 1)(list_argument);
				i++;
			}
			else
			{
				_putchar(format[i]);
				count++;
			}
		}
		else
		{
			_putchar(format[i]);
			count++;
		}
	}
	va_end(list_argument);
	return (count);
